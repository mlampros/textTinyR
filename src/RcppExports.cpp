// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// Path_2vector
std::vector<std::string> Path_2vector(std::string path_2folder, std::string path_2file);
RcppExport SEXP _textTinyR_Path_2vector(SEXP path_2folderSEXP, SEXP path_2fileSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type path_2folder(path_2folderSEXP);
    Rcpp::traits::input_parameter< std::string >::type path_2file(path_2fileSEXP);
    rcpp_result_gen = Rcpp::wrap(Path_2vector(path_2folder, path_2file));
    return rcpp_result_gen;
END_RCPP
}
// Frequency_distribution
std::unordered_map<std::string, int> Frequency_distribution(std::vector<std::string>& x, std::string path_2folder, std::string path_2file, char file_delimiter);
RcppExport SEXP _textTinyR_Frequency_distribution(SEXP xSEXP, SEXP path_2folderSEXP, SEXP path_2fileSEXP, SEXP file_delimiterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::string>& >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::string >::type path_2folder(path_2folderSEXP);
    Rcpp::traits::input_parameter< std::string >::type path_2file(path_2fileSEXP);
    Rcpp::traits::input_parameter< char >::type file_delimiter(file_delimiterSEXP);
    rcpp_result_gen = Rcpp::wrap(Frequency_distribution(x, path_2folder, path_2file, file_delimiter));
    return rcpp_result_gen;
END_RCPP
}
// Count_characters
std::unordered_map<int, std::vector<std::string>> Count_characters(std::vector<std::string> x, std::string path_2folder, std::string path_2file, char file_delimiter);
RcppExport SEXP _textTinyR_Count_characters(SEXP xSEXP, SEXP path_2folderSEXP, SEXP path_2fileSEXP, SEXP file_delimiterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::string> >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::string >::type path_2folder(path_2folderSEXP);
    Rcpp::traits::input_parameter< std::string >::type path_2file(path_2fileSEXP);
    Rcpp::traits::input_parameter< char >::type file_delimiter(file_delimiterSEXP);
    rcpp_result_gen = Rcpp::wrap(Count_characters(x, path_2folder, path_2file, file_delimiter));
    return rcpp_result_gen;
END_RCPP
}
// Collocations_ngrams
std::unordered_map<std::string, std::unordered_map<std::string, int> > Collocations_ngrams(std::vector<std::string> x, std::string path_2folder, std::string path_2file, char file_delimiter, std::string n_gram_delimiter);
RcppExport SEXP _textTinyR_Collocations_ngrams(SEXP xSEXP, SEXP path_2folderSEXP, SEXP path_2fileSEXP, SEXP file_delimiterSEXP, SEXP n_gram_delimiterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::string> >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::string >::type path_2folder(path_2folderSEXP);
    Rcpp::traits::input_parameter< std::string >::type path_2file(path_2fileSEXP);
    Rcpp::traits::input_parameter< char >::type file_delimiter(file_delimiterSEXP);
    Rcpp::traits::input_parameter< std::string >::type n_gram_delimiter(n_gram_delimiterSEXP);
    rcpp_result_gen = Rcpp::wrap(Collocations_ngrams(x, path_2folder, path_2file, file_delimiter, n_gram_delimiter));
    return rcpp_result_gen;
END_RCPP
}
// Dice_similarity
double Dice_similarity(std::string x, std::string y, int n_grams);
RcppExport SEXP _textTinyR_Dice_similarity(SEXP xSEXP, SEXP ySEXP, SEXP n_gramsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::string >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type n_grams(n_gramsSEXP);
    rcpp_result_gen = Rcpp::wrap(Dice_similarity(x, y, n_grams));
    return rcpp_result_gen;
END_RCPP
}
// Levenshtein_dist
double Levenshtein_dist(std::string& s, std::string& t);
RcppExport SEXP _textTinyR_Levenshtein_dist(SEXP sSEXP, SEXP tSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string& >::type s(sSEXP);
    Rcpp::traits::input_parameter< std::string& >::type t(tSEXP);
    rcpp_result_gen = Rcpp::wrap(Levenshtein_dist(s, t));
    return rcpp_result_gen;
END_RCPP
}
// Cosine_dist
double Cosine_dist(std::string& x, std::string& y, std::string split_separator);
RcppExport SEXP _textTinyR_Cosine_dist(SEXP xSEXP, SEXP ySEXP, SEXP split_separatorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string& >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::string& >::type y(ySEXP);
    Rcpp::traits::input_parameter< std::string >::type split_separator(split_separatorSEXP);
    rcpp_result_gen = Rcpp::wrap(Cosine_dist(x, y, split_separator));
    return rcpp_result_gen;
END_RCPP
}
// Dissimilarity_mat
arma::mat Dissimilarity_mat(std::vector<std::string> words, int dice_n_gram, std::string method, std::string split_separator, double dice_thresh, bool upper, bool diagonal, int threads);
RcppExport SEXP _textTinyR_Dissimilarity_mat(SEXP wordsSEXP, SEXP dice_n_gramSEXP, SEXP methodSEXP, SEXP split_separatorSEXP, SEXP dice_threshSEXP, SEXP upperSEXP, SEXP diagonalSEXP, SEXP threadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::string> >::type words(wordsSEXP);
    Rcpp::traits::input_parameter< int >::type dice_n_gram(dice_n_gramSEXP);
    Rcpp::traits::input_parameter< std::string >::type method(methodSEXP);
    Rcpp::traits::input_parameter< std::string >::type split_separator(split_separatorSEXP);
    Rcpp::traits::input_parameter< double >::type dice_thresh(dice_threshSEXP);
    Rcpp::traits::input_parameter< bool >::type upper(upperSEXP);
    Rcpp::traits::input_parameter< bool >::type diagonal(diagonalSEXP);
    Rcpp::traits::input_parameter< int >::type threads(threadsSEXP);
    rcpp_result_gen = Rcpp::wrap(Dissimilarity_mat(words, dice_n_gram, method, split_separator, dice_thresh, upper, diagonal, threads));
    return rcpp_result_gen;
END_RCPP
}
// Look_up_tbl
std::unordered_map<std::string, std::vector<std::string>> Look_up_tbl(std::vector<std::string> VEC, int n_grams);
RcppExport SEXP _textTinyR_Look_up_tbl(SEXP VECSEXP, SEXP n_gramsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::string> >::type VEC(VECSEXP);
    Rcpp::traits::input_parameter< int >::type n_grams(n_gramsSEXP);
    rcpp_result_gen = Rcpp::wrap(Look_up_tbl(VEC, n_grams));
    return rcpp_result_gen;
END_RCPP
}
// res_token
std::vector<std::string> res_token(std::string x, std::vector<std::string> language, std::string language_spec, std::string LOCALE_UTF, bool FLAG_path, char read_file_delimiter, int max_num_char, std::string remove_char, bool cpp_to_lower, bool cpp_to_upper, bool cpp_remove_punctuation, bool remove_punctuation_vector, bool cpp_remove_numbers, bool cpp_trim_token, bool cpp_tokenization_function, std::string cpp_string_separator, bool cpp_remove_stopwords, int min_num_char, std::string stemmer, int min_n_gram, int max_n_gram, int skip_n_gram, int skip_distance, std::string n_gram_delimiter, std::string concat_delimiter, std::string path_2file, int stemmer_ngram, double stemmer_gamma, int stemmer_truncate, int stemmer_batches, int threads, bool verbose, bool save_2single_file, std::string path_extend, std::string vocabulary_path);
RcppExport SEXP _textTinyR_res_token(SEXP xSEXP, SEXP languageSEXP, SEXP language_specSEXP, SEXP LOCALE_UTFSEXP, SEXP FLAG_pathSEXP, SEXP read_file_delimiterSEXP, SEXP max_num_charSEXP, SEXP remove_charSEXP, SEXP cpp_to_lowerSEXP, SEXP cpp_to_upperSEXP, SEXP cpp_remove_punctuationSEXP, SEXP remove_punctuation_vectorSEXP, SEXP cpp_remove_numbersSEXP, SEXP cpp_trim_tokenSEXP, SEXP cpp_tokenization_functionSEXP, SEXP cpp_string_separatorSEXP, SEXP cpp_remove_stopwordsSEXP, SEXP min_num_charSEXP, SEXP stemmerSEXP, SEXP min_n_gramSEXP, SEXP max_n_gramSEXP, SEXP skip_n_gramSEXP, SEXP skip_distanceSEXP, SEXP n_gram_delimiterSEXP, SEXP concat_delimiterSEXP, SEXP path_2fileSEXP, SEXP stemmer_ngramSEXP, SEXP stemmer_gammaSEXP, SEXP stemmer_truncateSEXP, SEXP stemmer_batchesSEXP, SEXP threadsSEXP, SEXP verboseSEXP, SEXP save_2single_fileSEXP, SEXP path_extendSEXP, SEXP vocabulary_pathSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type language(languageSEXP);
    Rcpp::traits::input_parameter< std::string >::type language_spec(language_specSEXP);
    Rcpp::traits::input_parameter< std::string >::type LOCALE_UTF(LOCALE_UTFSEXP);
    Rcpp::traits::input_parameter< bool >::type FLAG_path(FLAG_pathSEXP);
    Rcpp::traits::input_parameter< char >::type read_file_delimiter(read_file_delimiterSEXP);
    Rcpp::traits::input_parameter< int >::type max_num_char(max_num_charSEXP);
    Rcpp::traits::input_parameter< std::string >::type remove_char(remove_charSEXP);
    Rcpp::traits::input_parameter< bool >::type cpp_to_lower(cpp_to_lowerSEXP);
    Rcpp::traits::input_parameter< bool >::type cpp_to_upper(cpp_to_upperSEXP);
    Rcpp::traits::input_parameter< bool >::type cpp_remove_punctuation(cpp_remove_punctuationSEXP);
    Rcpp::traits::input_parameter< bool >::type remove_punctuation_vector(remove_punctuation_vectorSEXP);
    Rcpp::traits::input_parameter< bool >::type cpp_remove_numbers(cpp_remove_numbersSEXP);
    Rcpp::traits::input_parameter< bool >::type cpp_trim_token(cpp_trim_tokenSEXP);
    Rcpp::traits::input_parameter< bool >::type cpp_tokenization_function(cpp_tokenization_functionSEXP);
    Rcpp::traits::input_parameter< std::string >::type cpp_string_separator(cpp_string_separatorSEXP);
    Rcpp::traits::input_parameter< bool >::type cpp_remove_stopwords(cpp_remove_stopwordsSEXP);
    Rcpp::traits::input_parameter< int >::type min_num_char(min_num_charSEXP);
    Rcpp::traits::input_parameter< std::string >::type stemmer(stemmerSEXP);
    Rcpp::traits::input_parameter< int >::type min_n_gram(min_n_gramSEXP);
    Rcpp::traits::input_parameter< int >::type max_n_gram(max_n_gramSEXP);
    Rcpp::traits::input_parameter< int >::type skip_n_gram(skip_n_gramSEXP);
    Rcpp::traits::input_parameter< int >::type skip_distance(skip_distanceSEXP);
    Rcpp::traits::input_parameter< std::string >::type n_gram_delimiter(n_gram_delimiterSEXP);
    Rcpp::traits::input_parameter< std::string >::type concat_delimiter(concat_delimiterSEXP);
    Rcpp::traits::input_parameter< std::string >::type path_2file(path_2fileSEXP);
    Rcpp::traits::input_parameter< int >::type stemmer_ngram(stemmer_ngramSEXP);
    Rcpp::traits::input_parameter< double >::type stemmer_gamma(stemmer_gammaSEXP);
    Rcpp::traits::input_parameter< int >::type stemmer_truncate(stemmer_truncateSEXP);
    Rcpp::traits::input_parameter< int >::type stemmer_batches(stemmer_batchesSEXP);
    Rcpp::traits::input_parameter< int >::type threads(threadsSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< bool >::type save_2single_file(save_2single_fileSEXP);
    Rcpp::traits::input_parameter< std::string >::type path_extend(path_extendSEXP);
    Rcpp::traits::input_parameter< std::string >::type vocabulary_path(vocabulary_pathSEXP);
    rcpp_result_gen = Rcpp::wrap(res_token(x, language, language_spec, LOCALE_UTF, FLAG_path, read_file_delimiter, max_num_char, remove_char, cpp_to_lower, cpp_to_upper, cpp_remove_punctuation, remove_punctuation_vector, cpp_remove_numbers, cpp_trim_token, cpp_tokenization_function, cpp_string_separator, cpp_remove_stopwords, min_num_char, stemmer, min_n_gram, max_n_gram, skip_n_gram, skip_distance, n_gram_delimiter, concat_delimiter, path_2file, stemmer_ngram, stemmer_gamma, stemmer_truncate, stemmer_batches, threads, verbose, save_2single_file, path_extend, vocabulary_path));
    return rcpp_result_gen;
END_RCPP
}
// res_token_vector
std::vector<std::string> res_token_vector(std::vector<std::string>& VEC, std::vector<std::string>& language, std::string& language_spec, std::string& LOCALE_UTF, int max_num_char, std::string& remove_char, bool cpp_to_lower, bool cpp_to_upper, bool cpp_remove_punctuation, bool remove_punctuation_vector, bool cpp_remove_numbers, bool cpp_trim_token, bool cpp_tokenization_function, std::string& cpp_string_separator, bool cpp_remove_stopwords, int min_num_char, std::string& stemmer, int min_n_gram, int max_n_gram, int skip_n_gram, int skip_distance, std::string& n_gram_delimiter, std::string& concat_delimiter, std::string& path_2file, int stemmer_ngram, double stemmer_gamma, int stemmer_truncate, int stemmer_batches, int threads, bool verbose, std::string& vocabulary_path);
RcppExport SEXP _textTinyR_res_token_vector(SEXP VECSEXP, SEXP languageSEXP, SEXP language_specSEXP, SEXP LOCALE_UTFSEXP, SEXP max_num_charSEXP, SEXP remove_charSEXP, SEXP cpp_to_lowerSEXP, SEXP cpp_to_upperSEXP, SEXP cpp_remove_punctuationSEXP, SEXP remove_punctuation_vectorSEXP, SEXP cpp_remove_numbersSEXP, SEXP cpp_trim_tokenSEXP, SEXP cpp_tokenization_functionSEXP, SEXP cpp_string_separatorSEXP, SEXP cpp_remove_stopwordsSEXP, SEXP min_num_charSEXP, SEXP stemmerSEXP, SEXP min_n_gramSEXP, SEXP max_n_gramSEXP, SEXP skip_n_gramSEXP, SEXP skip_distanceSEXP, SEXP n_gram_delimiterSEXP, SEXP concat_delimiterSEXP, SEXP path_2fileSEXP, SEXP stemmer_ngramSEXP, SEXP stemmer_gammaSEXP, SEXP stemmer_truncateSEXP, SEXP stemmer_batchesSEXP, SEXP threadsSEXP, SEXP verboseSEXP, SEXP vocabulary_pathSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::string>& >::type VEC(VECSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string>& >::type language(languageSEXP);
    Rcpp::traits::input_parameter< std::string& >::type language_spec(language_specSEXP);
    Rcpp::traits::input_parameter< std::string& >::type LOCALE_UTF(LOCALE_UTFSEXP);
    Rcpp::traits::input_parameter< int >::type max_num_char(max_num_charSEXP);
    Rcpp::traits::input_parameter< std::string& >::type remove_char(remove_charSEXP);
    Rcpp::traits::input_parameter< bool >::type cpp_to_lower(cpp_to_lowerSEXP);
    Rcpp::traits::input_parameter< bool >::type cpp_to_upper(cpp_to_upperSEXP);
    Rcpp::traits::input_parameter< bool >::type cpp_remove_punctuation(cpp_remove_punctuationSEXP);
    Rcpp::traits::input_parameter< bool >::type remove_punctuation_vector(remove_punctuation_vectorSEXP);
    Rcpp::traits::input_parameter< bool >::type cpp_remove_numbers(cpp_remove_numbersSEXP);
    Rcpp::traits::input_parameter< bool >::type cpp_trim_token(cpp_trim_tokenSEXP);
    Rcpp::traits::input_parameter< bool >::type cpp_tokenization_function(cpp_tokenization_functionSEXP);
    Rcpp::traits::input_parameter< std::string& >::type cpp_string_separator(cpp_string_separatorSEXP);
    Rcpp::traits::input_parameter< bool >::type cpp_remove_stopwords(cpp_remove_stopwordsSEXP);
    Rcpp::traits::input_parameter< int >::type min_num_char(min_num_charSEXP);
    Rcpp::traits::input_parameter< std::string& >::type stemmer(stemmerSEXP);
    Rcpp::traits::input_parameter< int >::type min_n_gram(min_n_gramSEXP);
    Rcpp::traits::input_parameter< int >::type max_n_gram(max_n_gramSEXP);
    Rcpp::traits::input_parameter< int >::type skip_n_gram(skip_n_gramSEXP);
    Rcpp::traits::input_parameter< int >::type skip_distance(skip_distanceSEXP);
    Rcpp::traits::input_parameter< std::string& >::type n_gram_delimiter(n_gram_delimiterSEXP);
    Rcpp::traits::input_parameter< std::string& >::type concat_delimiter(concat_delimiterSEXP);
    Rcpp::traits::input_parameter< std::string& >::type path_2file(path_2fileSEXP);
    Rcpp::traits::input_parameter< int >::type stemmer_ngram(stemmer_ngramSEXP);
    Rcpp::traits::input_parameter< double >::type stemmer_gamma(stemmer_gammaSEXP);
    Rcpp::traits::input_parameter< int >::type stemmer_truncate(stemmer_truncateSEXP);
    Rcpp::traits::input_parameter< int >::type stemmer_batches(stemmer_batchesSEXP);
    Rcpp::traits::input_parameter< int >::type threads(threadsSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< std::string& >::type vocabulary_path(vocabulary_pathSEXP);
    rcpp_result_gen = Rcpp::wrap(res_token_vector(VEC, language, language_spec, LOCALE_UTF, max_num_char, remove_char, cpp_to_lower, cpp_to_upper, cpp_remove_punctuation, remove_punctuation_vector, cpp_remove_numbers, cpp_trim_token, cpp_tokenization_function, cpp_string_separator, cpp_remove_stopwords, min_num_char, stemmer, min_n_gram, max_n_gram, skip_n_gram, skip_distance, n_gram_delimiter, concat_delimiter, path_2file, stemmer_ngram, stemmer_gamma, stemmer_truncate, stemmer_batches, threads, verbose, vocabulary_path));
    return rcpp_result_gen;
END_RCPP
}
// res_token_list
std::vector<std::vector<std::string> > res_token_list(std::vector<std::string>& VEC, std::vector<std::string>& language, std::string& language_spec, std::string& LOCALE_UTF, int max_num_char, std::string& remove_char, bool cpp_to_lower, bool cpp_to_upper, bool cpp_remove_punctuation, bool remove_punctuation_vector, bool cpp_remove_numbers, bool cpp_trim_token, bool cpp_tokenization_function, std::string& cpp_string_separator, bool cpp_remove_stopwords, int min_num_char, std::string& stemmer, int min_n_gram, int max_n_gram, int skip_n_gram, int skip_distance, std::string& n_gram_delimiter, std::string& concat_delimiter, std::string& path_2file, int stemmer_ngram, double stemmer_gamma, int stemmer_truncate, int stemmer_batches, int threads, bool verbose, std::string& vocabulary_path);
RcppExport SEXP _textTinyR_res_token_list(SEXP VECSEXP, SEXP languageSEXP, SEXP language_specSEXP, SEXP LOCALE_UTFSEXP, SEXP max_num_charSEXP, SEXP remove_charSEXP, SEXP cpp_to_lowerSEXP, SEXP cpp_to_upperSEXP, SEXP cpp_remove_punctuationSEXP, SEXP remove_punctuation_vectorSEXP, SEXP cpp_remove_numbersSEXP, SEXP cpp_trim_tokenSEXP, SEXP cpp_tokenization_functionSEXP, SEXP cpp_string_separatorSEXP, SEXP cpp_remove_stopwordsSEXP, SEXP min_num_charSEXP, SEXP stemmerSEXP, SEXP min_n_gramSEXP, SEXP max_n_gramSEXP, SEXP skip_n_gramSEXP, SEXP skip_distanceSEXP, SEXP n_gram_delimiterSEXP, SEXP concat_delimiterSEXP, SEXP path_2fileSEXP, SEXP stemmer_ngramSEXP, SEXP stemmer_gammaSEXP, SEXP stemmer_truncateSEXP, SEXP stemmer_batchesSEXP, SEXP threadsSEXP, SEXP verboseSEXP, SEXP vocabulary_pathSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::string>& >::type VEC(VECSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string>& >::type language(languageSEXP);
    Rcpp::traits::input_parameter< std::string& >::type language_spec(language_specSEXP);
    Rcpp::traits::input_parameter< std::string& >::type LOCALE_UTF(LOCALE_UTFSEXP);
    Rcpp::traits::input_parameter< int >::type max_num_char(max_num_charSEXP);
    Rcpp::traits::input_parameter< std::string& >::type remove_char(remove_charSEXP);
    Rcpp::traits::input_parameter< bool >::type cpp_to_lower(cpp_to_lowerSEXP);
    Rcpp::traits::input_parameter< bool >::type cpp_to_upper(cpp_to_upperSEXP);
    Rcpp::traits::input_parameter< bool >::type cpp_remove_punctuation(cpp_remove_punctuationSEXP);
    Rcpp::traits::input_parameter< bool >::type remove_punctuation_vector(remove_punctuation_vectorSEXP);
    Rcpp::traits::input_parameter< bool >::type cpp_remove_numbers(cpp_remove_numbersSEXP);
    Rcpp::traits::input_parameter< bool >::type cpp_trim_token(cpp_trim_tokenSEXP);
    Rcpp::traits::input_parameter< bool >::type cpp_tokenization_function(cpp_tokenization_functionSEXP);
    Rcpp::traits::input_parameter< std::string& >::type cpp_string_separator(cpp_string_separatorSEXP);
    Rcpp::traits::input_parameter< bool >::type cpp_remove_stopwords(cpp_remove_stopwordsSEXP);
    Rcpp::traits::input_parameter< int >::type min_num_char(min_num_charSEXP);
    Rcpp::traits::input_parameter< std::string& >::type stemmer(stemmerSEXP);
    Rcpp::traits::input_parameter< int >::type min_n_gram(min_n_gramSEXP);
    Rcpp::traits::input_parameter< int >::type max_n_gram(max_n_gramSEXP);
    Rcpp::traits::input_parameter< int >::type skip_n_gram(skip_n_gramSEXP);
    Rcpp::traits::input_parameter< int >::type skip_distance(skip_distanceSEXP);
    Rcpp::traits::input_parameter< std::string& >::type n_gram_delimiter(n_gram_delimiterSEXP);
    Rcpp::traits::input_parameter< std::string& >::type concat_delimiter(concat_delimiterSEXP);
    Rcpp::traits::input_parameter< std::string& >::type path_2file(path_2fileSEXP);
    Rcpp::traits::input_parameter< int >::type stemmer_ngram(stemmer_ngramSEXP);
    Rcpp::traits::input_parameter< double >::type stemmer_gamma(stemmer_gammaSEXP);
    Rcpp::traits::input_parameter< int >::type stemmer_truncate(stemmer_truncateSEXP);
    Rcpp::traits::input_parameter< int >::type stemmer_batches(stemmer_batchesSEXP);
    Rcpp::traits::input_parameter< int >::type threads(threadsSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< std::string& >::type vocabulary_path(vocabulary_pathSEXP);
    rcpp_result_gen = Rcpp::wrap(res_token_list(VEC, language, language_spec, LOCALE_UTF, max_num_char, remove_char, cpp_to_lower, cpp_to_upper, cpp_remove_punctuation, remove_punctuation_vector, cpp_remove_numbers, cpp_trim_token, cpp_tokenization_function, cpp_string_separator, cpp_remove_stopwords, min_num_char, stemmer, min_n_gram, max_n_gram, skip_n_gram, skip_distance, n_gram_delimiter, concat_delimiter, path_2file, stemmer_ngram, stemmer_gamma, stemmer_truncate, stemmer_batches, threads, verbose, vocabulary_path));
    return rcpp_result_gen;
END_RCPP
}
// big_splitter_bytes
void big_splitter_bytes(std::string input_path, int batches, std::string end_query, std::string OUTPUT_PATH, bool trimmed_line, bool verbose);
RcppExport SEXP _textTinyR_big_splitter_bytes(SEXP input_pathSEXP, SEXP batchesSEXP, SEXP end_querySEXP, SEXP OUTPUT_PATHSEXP, SEXP trimmed_lineSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type input_path(input_pathSEXP);
    Rcpp::traits::input_parameter< int >::type batches(batchesSEXP);
    Rcpp::traits::input_parameter< std::string >::type end_query(end_querySEXP);
    Rcpp::traits::input_parameter< std::string >::type OUTPUT_PATH(OUTPUT_PATHSEXP);
    Rcpp::traits::input_parameter< bool >::type trimmed_line(trimmed_lineSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    big_splitter_bytes(input_path, batches, end_query, OUTPUT_PATH, trimmed_line, verbose);
    return R_NilValue;
END_RCPP
}
// big_parser
void big_parser(std::string input_path_folder, std::string start_query, std::string end_query, std::string output_path_folder, int min_lines, bool trimmed_line, bool verbose);
RcppExport SEXP _textTinyR_big_parser(SEXP input_path_folderSEXP, SEXP start_querySEXP, SEXP end_querySEXP, SEXP output_path_folderSEXP, SEXP min_linesSEXP, SEXP trimmed_lineSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type input_path_folder(input_path_folderSEXP);
    Rcpp::traits::input_parameter< std::string >::type start_query(start_querySEXP);
    Rcpp::traits::input_parameter< std::string >::type end_query(end_querySEXP);
    Rcpp::traits::input_parameter< std::string >::type output_path_folder(output_path_folderSEXP);
    Rcpp::traits::input_parameter< int >::type min_lines(min_linesSEXP);
    Rcpp::traits::input_parameter< bool >::type trimmed_line(trimmed_lineSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    big_parser(input_path_folder, start_query, end_query, output_path_folder, min_lines, trimmed_line, verbose);
    return R_NilValue;
END_RCPP
}
// file_parser
void file_parser(std::string input_path_file, std::string start_query, std::string end_query, std::string output_path_file, int min_lines, bool trimmed_line, bool verbose);
RcppExport SEXP _textTinyR_file_parser(SEXP input_path_fileSEXP, SEXP start_querySEXP, SEXP end_querySEXP, SEXP output_path_fileSEXP, SEXP min_linesSEXP, SEXP trimmed_lineSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type input_path_file(input_path_fileSEXP);
    Rcpp::traits::input_parameter< std::string >::type start_query(start_querySEXP);
    Rcpp::traits::input_parameter< std::string >::type end_query(end_querySEXP);
    Rcpp::traits::input_parameter< std::string >::type output_path_file(output_path_fileSEXP);
    Rcpp::traits::input_parameter< int >::type min_lines(min_linesSEXP);
    Rcpp::traits::input_parameter< bool >::type trimmed_line(trimmed_lineSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    file_parser(input_path_file, start_query, end_query, output_path_file, min_lines, trimmed_line, verbose);
    return R_NilValue;
END_RCPP
}
// convert_bytes
double convert_bytes(std::string input_path_file, std::string unit);
RcppExport SEXP _textTinyR_convert_bytes(SEXP input_path_fileSEXP, SEXP unitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type input_path_file(input_path_fileSEXP);
    Rcpp::traits::input_parameter< std::string >::type unit(unitSEXP);
    rcpp_result_gen = Rcpp::wrap(convert_bytes(input_path_file, unit));
    return rcpp_result_gen;
END_RCPP
}
// big_tokenize
void big_tokenize(std::string input_path_folder, std::string output_path_folder, int batches, std::vector<std::string> language, std::string language_spec, std::string LOCALE_UTF, char read_file_delimiter, int max_num_char, int increment_batch_no, std::string remove_char, bool cpp_to_lower, bool cpp_to_upper, bool cpp_remove_punctuation, bool remove_punctuation_vector, bool cpp_remove_numbers, bool cpp_trim_token, bool cpp_tokenization_function, std::string cpp_string_separator, bool cpp_remove_stopwords, int min_num_char, std::string stemmer, int min_n_gram, int max_n_gram, int skip_n_gram, int skip_distance, std::string n_gram_delimiter, std::string concat_delimiter, int stemmer_ngram, double stemmer_gamma, int stemmer_truncate, int stemmer_batches, int threads, bool save_2single_file, std::string vocabulary_folder, bool verbose);
RcppExport SEXP _textTinyR_big_tokenize(SEXP input_path_folderSEXP, SEXP output_path_folderSEXP, SEXP batchesSEXP, SEXP languageSEXP, SEXP language_specSEXP, SEXP LOCALE_UTFSEXP, SEXP read_file_delimiterSEXP, SEXP max_num_charSEXP, SEXP increment_batch_noSEXP, SEXP remove_charSEXP, SEXP cpp_to_lowerSEXP, SEXP cpp_to_upperSEXP, SEXP cpp_remove_punctuationSEXP, SEXP remove_punctuation_vectorSEXP, SEXP cpp_remove_numbersSEXP, SEXP cpp_trim_tokenSEXP, SEXP cpp_tokenization_functionSEXP, SEXP cpp_string_separatorSEXP, SEXP cpp_remove_stopwordsSEXP, SEXP min_num_charSEXP, SEXP stemmerSEXP, SEXP min_n_gramSEXP, SEXP max_n_gramSEXP, SEXP skip_n_gramSEXP, SEXP skip_distanceSEXP, SEXP n_gram_delimiterSEXP, SEXP concat_delimiterSEXP, SEXP stemmer_ngramSEXP, SEXP stemmer_gammaSEXP, SEXP stemmer_truncateSEXP, SEXP stemmer_batchesSEXP, SEXP threadsSEXP, SEXP save_2single_fileSEXP, SEXP vocabulary_folderSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type input_path_folder(input_path_folderSEXP);
    Rcpp::traits::input_parameter< std::string >::type output_path_folder(output_path_folderSEXP);
    Rcpp::traits::input_parameter< int >::type batches(batchesSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type language(languageSEXP);
    Rcpp::traits::input_parameter< std::string >::type language_spec(language_specSEXP);
    Rcpp::traits::input_parameter< std::string >::type LOCALE_UTF(LOCALE_UTFSEXP);
    Rcpp::traits::input_parameter< char >::type read_file_delimiter(read_file_delimiterSEXP);
    Rcpp::traits::input_parameter< int >::type max_num_char(max_num_charSEXP);
    Rcpp::traits::input_parameter< int >::type increment_batch_no(increment_batch_noSEXP);
    Rcpp::traits::input_parameter< std::string >::type remove_char(remove_charSEXP);
    Rcpp::traits::input_parameter< bool >::type cpp_to_lower(cpp_to_lowerSEXP);
    Rcpp::traits::input_parameter< bool >::type cpp_to_upper(cpp_to_upperSEXP);
    Rcpp::traits::input_parameter< bool >::type cpp_remove_punctuation(cpp_remove_punctuationSEXP);
    Rcpp::traits::input_parameter< bool >::type remove_punctuation_vector(remove_punctuation_vectorSEXP);
    Rcpp::traits::input_parameter< bool >::type cpp_remove_numbers(cpp_remove_numbersSEXP);
    Rcpp::traits::input_parameter< bool >::type cpp_trim_token(cpp_trim_tokenSEXP);
    Rcpp::traits::input_parameter< bool >::type cpp_tokenization_function(cpp_tokenization_functionSEXP);
    Rcpp::traits::input_parameter< std::string >::type cpp_string_separator(cpp_string_separatorSEXP);
    Rcpp::traits::input_parameter< bool >::type cpp_remove_stopwords(cpp_remove_stopwordsSEXP);
    Rcpp::traits::input_parameter< int >::type min_num_char(min_num_charSEXP);
    Rcpp::traits::input_parameter< std::string >::type stemmer(stemmerSEXP);
    Rcpp::traits::input_parameter< int >::type min_n_gram(min_n_gramSEXP);
    Rcpp::traits::input_parameter< int >::type max_n_gram(max_n_gramSEXP);
    Rcpp::traits::input_parameter< int >::type skip_n_gram(skip_n_gramSEXP);
    Rcpp::traits::input_parameter< int >::type skip_distance(skip_distanceSEXP);
    Rcpp::traits::input_parameter< std::string >::type n_gram_delimiter(n_gram_delimiterSEXP);
    Rcpp::traits::input_parameter< std::string >::type concat_delimiter(concat_delimiterSEXP);
    Rcpp::traits::input_parameter< int >::type stemmer_ngram(stemmer_ngramSEXP);
    Rcpp::traits::input_parameter< double >::type stemmer_gamma(stemmer_gammaSEXP);
    Rcpp::traits::input_parameter< int >::type stemmer_truncate(stemmer_truncateSEXP);
    Rcpp::traits::input_parameter< int >::type stemmer_batches(stemmer_batchesSEXP);
    Rcpp::traits::input_parameter< int >::type threads(threadsSEXP);
    Rcpp::traits::input_parameter< bool >::type save_2single_file(save_2single_fileSEXP);
    Rcpp::traits::input_parameter< std::string >::type vocabulary_folder(vocabulary_folderSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    big_tokenize(input_path_folder, output_path_folder, batches, language, language_spec, LOCALE_UTF, read_file_delimiter, max_num_char, increment_batch_no, remove_char, cpp_to_lower, cpp_to_upper, cpp_remove_punctuation, remove_punctuation_vector, cpp_remove_numbers, cpp_trim_token, cpp_tokenization_function, cpp_string_separator, cpp_remove_stopwords, min_num_char, stemmer, min_n_gram, max_n_gram, skip_n_gram, skip_distance, n_gram_delimiter, concat_delimiter, stemmer_ngram, stemmer_gamma, stemmer_truncate, stemmer_batches, threads, save_2single_file, vocabulary_folder, verbose);
    return R_NilValue;
END_RCPP
}
// vocabulary_counts_big_tokenize
void vocabulary_counts_big_tokenize(std::string input_path_folder, std::string output_path_file, int max_num_chars, bool verbose);
RcppExport SEXP _textTinyR_vocabulary_counts_big_tokenize(SEXP input_path_folderSEXP, SEXP output_path_fileSEXP, SEXP max_num_charsSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type input_path_folder(input_path_folderSEXP);
    Rcpp::traits::input_parameter< std::string >::type output_path_file(output_path_fileSEXP);
    Rcpp::traits::input_parameter< int >::type max_num_chars(max_num_charsSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    vocabulary_counts_big_tokenize(input_path_folder, output_path_file, max_num_chars, verbose);
    return R_NilValue;
END_RCPP
}
// vocabulary_counts
void vocabulary_counts(std::string input_path_file, std::string start_query, std::string end_query, std::vector<std::string> language, std::string output_path_file, int min_lines, bool trimmed_line, bool query_transform, std::string language_spec, std::string LOCALE_UTF, long long max_num_char, std::string remove_char, bool cpp_to_lower, bool cpp_to_upper, bool cpp_remove_punctuation, bool remove_punctuation_vector, bool cpp_remove_numbers, bool cpp_trim_token, bool cpp_tokenization_function, std::string cpp_string_separator, bool cpp_remove_stopwords, int min_num_char, std::string stemmer, int min_n_gram, int max_n_gram, int skip_n_gram, int skip_distance, std::string n_gram_delimiter, int threads, bool verbose);
RcppExport SEXP _textTinyR_vocabulary_counts(SEXP input_path_fileSEXP, SEXP start_querySEXP, SEXP end_querySEXP, SEXP languageSEXP, SEXP output_path_fileSEXP, SEXP min_linesSEXP, SEXP trimmed_lineSEXP, SEXP query_transformSEXP, SEXP language_specSEXP, SEXP LOCALE_UTFSEXP, SEXP max_num_charSEXP, SEXP remove_charSEXP, SEXP cpp_to_lowerSEXP, SEXP cpp_to_upperSEXP, SEXP cpp_remove_punctuationSEXP, SEXP remove_punctuation_vectorSEXP, SEXP cpp_remove_numbersSEXP, SEXP cpp_trim_tokenSEXP, SEXP cpp_tokenization_functionSEXP, SEXP cpp_string_separatorSEXP, SEXP cpp_remove_stopwordsSEXP, SEXP min_num_charSEXP, SEXP stemmerSEXP, SEXP min_n_gramSEXP, SEXP max_n_gramSEXP, SEXP skip_n_gramSEXP, SEXP skip_distanceSEXP, SEXP n_gram_delimiterSEXP, SEXP threadsSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type input_path_file(input_path_fileSEXP);
    Rcpp::traits::input_parameter< std::string >::type start_query(start_querySEXP);
    Rcpp::traits::input_parameter< std::string >::type end_query(end_querySEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type language(languageSEXP);
    Rcpp::traits::input_parameter< std::string >::type output_path_file(output_path_fileSEXP);
    Rcpp::traits::input_parameter< int >::type min_lines(min_linesSEXP);
    Rcpp::traits::input_parameter< bool >::type trimmed_line(trimmed_lineSEXP);
    Rcpp::traits::input_parameter< bool >::type query_transform(query_transformSEXP);
    Rcpp::traits::input_parameter< std::string >::type language_spec(language_specSEXP);
    Rcpp::traits::input_parameter< std::string >::type LOCALE_UTF(LOCALE_UTFSEXP);
    Rcpp::traits::input_parameter< long long >::type max_num_char(max_num_charSEXP);
    Rcpp::traits::input_parameter< std::string >::type remove_char(remove_charSEXP);
    Rcpp::traits::input_parameter< bool >::type cpp_to_lower(cpp_to_lowerSEXP);
    Rcpp::traits::input_parameter< bool >::type cpp_to_upper(cpp_to_upperSEXP);
    Rcpp::traits::input_parameter< bool >::type cpp_remove_punctuation(cpp_remove_punctuationSEXP);
    Rcpp::traits::input_parameter< bool >::type remove_punctuation_vector(remove_punctuation_vectorSEXP);
    Rcpp::traits::input_parameter< bool >::type cpp_remove_numbers(cpp_remove_numbersSEXP);
    Rcpp::traits::input_parameter< bool >::type cpp_trim_token(cpp_trim_tokenSEXP);
    Rcpp::traits::input_parameter< bool >::type cpp_tokenization_function(cpp_tokenization_functionSEXP);
    Rcpp::traits::input_parameter< std::string >::type cpp_string_separator(cpp_string_separatorSEXP);
    Rcpp::traits::input_parameter< bool >::type cpp_remove_stopwords(cpp_remove_stopwordsSEXP);
    Rcpp::traits::input_parameter< int >::type min_num_char(min_num_charSEXP);
    Rcpp::traits::input_parameter< std::string >::type stemmer(stemmerSEXP);
    Rcpp::traits::input_parameter< int >::type min_n_gram(min_n_gramSEXP);
    Rcpp::traits::input_parameter< int >::type max_n_gram(max_n_gramSEXP);
    Rcpp::traits::input_parameter< int >::type skip_n_gram(skip_n_gramSEXP);
    Rcpp::traits::input_parameter< int >::type skip_distance(skip_distanceSEXP);
    Rcpp::traits::input_parameter< std::string >::type n_gram_delimiter(n_gram_delimiterSEXP);
    Rcpp::traits::input_parameter< int >::type threads(threadsSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    vocabulary_counts(input_path_file, start_query, end_query, language, output_path_file, min_lines, trimmed_line, query_transform, language_spec, LOCALE_UTF, max_num_char, remove_char, cpp_to_lower, cpp_to_upper, cpp_remove_punctuation, remove_punctuation_vector, cpp_remove_numbers, cpp_trim_token, cpp_tokenization_function, cpp_string_separator, cpp_remove_stopwords, min_num_char, stemmer, min_n_gram, max_n_gram, skip_n_gram, skip_distance, n_gram_delimiter, threads, verbose);
    return R_NilValue;
END_RCPP
}
// batch_2file
void batch_2file(std::string INPUT_FILE, std::string OUTPUT_PATH, int batches, char read_file_delimiter, std::vector<std::string> language, std::string language_spec, std::string LOCALE_UTF, int max_num_char, std::string remove_char, bool cpp_to_lower, bool cpp_to_upper, bool cpp_remove_punctuation, bool remove_punctuation_vector, bool cpp_remove_numbers, bool cpp_trim_token, bool cpp_tokenization_function, std::string cpp_string_separator, bool cpp_remove_stopwords, int min_num_char, std::string stemmer, int min_n_gram, int max_n_gram, int skip_n_gram, int skip_distance, std::string n_gram_delimiter, int stemmer_ngram, double stemmer_gamma, int stemmer_truncate, int stemmer_batches, int threads, std::string concat_delimiter, std::string vocabulary_path, bool verbose);
RcppExport SEXP _textTinyR_batch_2file(SEXP INPUT_FILESEXP, SEXP OUTPUT_PATHSEXP, SEXP batchesSEXP, SEXP read_file_delimiterSEXP, SEXP languageSEXP, SEXP language_specSEXP, SEXP LOCALE_UTFSEXP, SEXP max_num_charSEXP, SEXP remove_charSEXP, SEXP cpp_to_lowerSEXP, SEXP cpp_to_upperSEXP, SEXP cpp_remove_punctuationSEXP, SEXP remove_punctuation_vectorSEXP, SEXP cpp_remove_numbersSEXP, SEXP cpp_trim_tokenSEXP, SEXP cpp_tokenization_functionSEXP, SEXP cpp_string_separatorSEXP, SEXP cpp_remove_stopwordsSEXP, SEXP min_num_charSEXP, SEXP stemmerSEXP, SEXP min_n_gramSEXP, SEXP max_n_gramSEXP, SEXP skip_n_gramSEXP, SEXP skip_distanceSEXP, SEXP n_gram_delimiterSEXP, SEXP stemmer_ngramSEXP, SEXP stemmer_gammaSEXP, SEXP stemmer_truncateSEXP, SEXP stemmer_batchesSEXP, SEXP threadsSEXP, SEXP concat_delimiterSEXP, SEXP vocabulary_pathSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type INPUT_FILE(INPUT_FILESEXP);
    Rcpp::traits::input_parameter< std::string >::type OUTPUT_PATH(OUTPUT_PATHSEXP);
    Rcpp::traits::input_parameter< int >::type batches(batchesSEXP);
    Rcpp::traits::input_parameter< char >::type read_file_delimiter(read_file_delimiterSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type language(languageSEXP);
    Rcpp::traits::input_parameter< std::string >::type language_spec(language_specSEXP);
    Rcpp::traits::input_parameter< std::string >::type LOCALE_UTF(LOCALE_UTFSEXP);
    Rcpp::traits::input_parameter< int >::type max_num_char(max_num_charSEXP);
    Rcpp::traits::input_parameter< std::string >::type remove_char(remove_charSEXP);
    Rcpp::traits::input_parameter< bool >::type cpp_to_lower(cpp_to_lowerSEXP);
    Rcpp::traits::input_parameter< bool >::type cpp_to_upper(cpp_to_upperSEXP);
    Rcpp::traits::input_parameter< bool >::type cpp_remove_punctuation(cpp_remove_punctuationSEXP);
    Rcpp::traits::input_parameter< bool >::type remove_punctuation_vector(remove_punctuation_vectorSEXP);
    Rcpp::traits::input_parameter< bool >::type cpp_remove_numbers(cpp_remove_numbersSEXP);
    Rcpp::traits::input_parameter< bool >::type cpp_trim_token(cpp_trim_tokenSEXP);
    Rcpp::traits::input_parameter< bool >::type cpp_tokenization_function(cpp_tokenization_functionSEXP);
    Rcpp::traits::input_parameter< std::string >::type cpp_string_separator(cpp_string_separatorSEXP);
    Rcpp::traits::input_parameter< bool >::type cpp_remove_stopwords(cpp_remove_stopwordsSEXP);
    Rcpp::traits::input_parameter< int >::type min_num_char(min_num_charSEXP);
    Rcpp::traits::input_parameter< std::string >::type stemmer(stemmerSEXP);
    Rcpp::traits::input_parameter< int >::type min_n_gram(min_n_gramSEXP);
    Rcpp::traits::input_parameter< int >::type max_n_gram(max_n_gramSEXP);
    Rcpp::traits::input_parameter< int >::type skip_n_gram(skip_n_gramSEXP);
    Rcpp::traits::input_parameter< int >::type skip_distance(skip_distanceSEXP);
    Rcpp::traits::input_parameter< std::string >::type n_gram_delimiter(n_gram_delimiterSEXP);
    Rcpp::traits::input_parameter< int >::type stemmer_ngram(stemmer_ngramSEXP);
    Rcpp::traits::input_parameter< double >::type stemmer_gamma(stemmer_gammaSEXP);
    Rcpp::traits::input_parameter< int >::type stemmer_truncate(stemmer_truncateSEXP);
    Rcpp::traits::input_parameter< int >::type stemmer_batches(stemmer_batchesSEXP);
    Rcpp::traits::input_parameter< int >::type threads(threadsSEXP);
    Rcpp::traits::input_parameter< std::string >::type concat_delimiter(concat_delimiterSEXP);
    Rcpp::traits::input_parameter< std::string >::type vocabulary_path(vocabulary_pathSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    batch_2file(INPUT_FILE, OUTPUT_PATH, batches, read_file_delimiter, language, language_spec, LOCALE_UTF, max_num_char, remove_char, cpp_to_lower, cpp_to_upper, cpp_remove_punctuation, remove_punctuation_vector, cpp_remove_numbers, cpp_trim_token, cpp_tokenization_function, cpp_string_separator, cpp_remove_stopwords, min_num_char, stemmer, min_n_gram, max_n_gram, skip_n_gram, skip_distance, n_gram_delimiter, stemmer_ngram, stemmer_gamma, stemmer_truncate, stemmer_batches, threads, concat_delimiter, vocabulary_path, verbose);
    return R_NilValue;
END_RCPP
}
// res_term_matrix
Rcpp::List res_term_matrix(std::vector<std::string> vector_corpus, std::vector<std::string> language, std::string language_spec, std::string LOCALE_UTF, long long max_num_char, bool document_term_matrix, std::string path_2documents_file, bool sort_columns, std::string remove_char, bool cpp_to_lower, bool cpp_to_upper, bool cpp_remove_punctuation, bool remove_punctuation_vector, bool cpp_remove_numbers, bool cpp_trim_token, bool cpp_tokenization_function, std::string cpp_string_separator, bool cpp_remove_stopwords, int min_num_char, std::string stemmer, int min_n_gram, int max_n_gram, int skip_n_gram, int skip_distance, std::string n_gram_delimiter, int stemmer_ngram, double stemmer_gamma, int stemmer_truncate, int stemmer_batches, int threads, bool verbose, long long print_every_rows, std::string normalize_tf, bool tf_idf);
RcppExport SEXP _textTinyR_res_term_matrix(SEXP vector_corpusSEXP, SEXP languageSEXP, SEXP language_specSEXP, SEXP LOCALE_UTFSEXP, SEXP max_num_charSEXP, SEXP document_term_matrixSEXP, SEXP path_2documents_fileSEXP, SEXP sort_columnsSEXP, SEXP remove_charSEXP, SEXP cpp_to_lowerSEXP, SEXP cpp_to_upperSEXP, SEXP cpp_remove_punctuationSEXP, SEXP remove_punctuation_vectorSEXP, SEXP cpp_remove_numbersSEXP, SEXP cpp_trim_tokenSEXP, SEXP cpp_tokenization_functionSEXP, SEXP cpp_string_separatorSEXP, SEXP cpp_remove_stopwordsSEXP, SEXP min_num_charSEXP, SEXP stemmerSEXP, SEXP min_n_gramSEXP, SEXP max_n_gramSEXP, SEXP skip_n_gramSEXP, SEXP skip_distanceSEXP, SEXP n_gram_delimiterSEXP, SEXP stemmer_ngramSEXP, SEXP stemmer_gammaSEXP, SEXP stemmer_truncateSEXP, SEXP stemmer_batchesSEXP, SEXP threadsSEXP, SEXP verboseSEXP, SEXP print_every_rowsSEXP, SEXP normalize_tfSEXP, SEXP tf_idfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::string> >::type vector_corpus(vector_corpusSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type language(languageSEXP);
    Rcpp::traits::input_parameter< std::string >::type language_spec(language_specSEXP);
    Rcpp::traits::input_parameter< std::string >::type LOCALE_UTF(LOCALE_UTFSEXP);
    Rcpp::traits::input_parameter< long long >::type max_num_char(max_num_charSEXP);
    Rcpp::traits::input_parameter< bool >::type document_term_matrix(document_term_matrixSEXP);
    Rcpp::traits::input_parameter< std::string >::type path_2documents_file(path_2documents_fileSEXP);
    Rcpp::traits::input_parameter< bool >::type sort_columns(sort_columnsSEXP);
    Rcpp::traits::input_parameter< std::string >::type remove_char(remove_charSEXP);
    Rcpp::traits::input_parameter< bool >::type cpp_to_lower(cpp_to_lowerSEXP);
    Rcpp::traits::input_parameter< bool >::type cpp_to_upper(cpp_to_upperSEXP);
    Rcpp::traits::input_parameter< bool >::type cpp_remove_punctuation(cpp_remove_punctuationSEXP);
    Rcpp::traits::input_parameter< bool >::type remove_punctuation_vector(remove_punctuation_vectorSEXP);
    Rcpp::traits::input_parameter< bool >::type cpp_remove_numbers(cpp_remove_numbersSEXP);
    Rcpp::traits::input_parameter< bool >::type cpp_trim_token(cpp_trim_tokenSEXP);
    Rcpp::traits::input_parameter< bool >::type cpp_tokenization_function(cpp_tokenization_functionSEXP);
    Rcpp::traits::input_parameter< std::string >::type cpp_string_separator(cpp_string_separatorSEXP);
    Rcpp::traits::input_parameter< bool >::type cpp_remove_stopwords(cpp_remove_stopwordsSEXP);
    Rcpp::traits::input_parameter< int >::type min_num_char(min_num_charSEXP);
    Rcpp::traits::input_parameter< std::string >::type stemmer(stemmerSEXP);
    Rcpp::traits::input_parameter< int >::type min_n_gram(min_n_gramSEXP);
    Rcpp::traits::input_parameter< int >::type max_n_gram(max_n_gramSEXP);
    Rcpp::traits::input_parameter< int >::type skip_n_gram(skip_n_gramSEXP);
    Rcpp::traits::input_parameter< int >::type skip_distance(skip_distanceSEXP);
    Rcpp::traits::input_parameter< std::string >::type n_gram_delimiter(n_gram_delimiterSEXP);
    Rcpp::traits::input_parameter< int >::type stemmer_ngram(stemmer_ngramSEXP);
    Rcpp::traits::input_parameter< double >::type stemmer_gamma(stemmer_gammaSEXP);
    Rcpp::traits::input_parameter< int >::type stemmer_truncate(stemmer_truncateSEXP);
    Rcpp::traits::input_parameter< int >::type stemmer_batches(stemmer_batchesSEXP);
    Rcpp::traits::input_parameter< int >::type threads(threadsSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< long long >::type print_every_rows(print_every_rowsSEXP);
    Rcpp::traits::input_parameter< std::string >::type normalize_tf(normalize_tfSEXP);
    Rcpp::traits::input_parameter< bool >::type tf_idf(tf_idfSEXP);
    rcpp_result_gen = Rcpp::wrap(res_term_matrix(vector_corpus, language, language_spec, LOCALE_UTF, max_num_char, document_term_matrix, path_2documents_file, sort_columns, remove_char, cpp_to_lower, cpp_to_upper, cpp_remove_punctuation, remove_punctuation_vector, cpp_remove_numbers, cpp_trim_token, cpp_tokenization_function, cpp_string_separator, cpp_remove_stopwords, min_num_char, stemmer, min_n_gram, max_n_gram, skip_n_gram, skip_distance, n_gram_delimiter, stemmer_ngram, stemmer_gamma, stemmer_truncate, stemmer_batches, threads, verbose, print_every_rows, normalize_tf, tf_idf));
    return rcpp_result_gen;
END_RCPP
}
// idf_global_term_weights
Rcpp::List idf_global_term_weights(arma::sp_mat Tmat, std::vector<std::string> Terms);
RcppExport SEXP _textTinyR_idf_global_term_weights(SEXP TmatSEXP, SEXP TermsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::sp_mat >::type Tmat(TmatSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type Terms(TermsSEXP);
    rcpp_result_gen = Rcpp::wrap(idf_global_term_weights(Tmat, Terms));
    return rcpp_result_gen;
END_RCPP
}
// Adj_Sparsity
Rcpp::List Adj_Sparsity(arma::rowvec column_indices, arma::rowvec row_indices, arma::vec docs_counts, std::vector<std::string> Terms, double sparsity_thresh);
RcppExport SEXP _textTinyR_Adj_Sparsity(SEXP column_indicesSEXP, SEXP row_indicesSEXP, SEXP docs_countsSEXP, SEXP TermsSEXP, SEXP sparsity_threshSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::rowvec >::type column_indices(column_indicesSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type row_indices(row_indicesSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type docs_counts(docs_countsSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type Terms(TermsSEXP);
    Rcpp::traits::input_parameter< double >::type sparsity_thresh(sparsity_threshSEXP);
    rcpp_result_gen = Rcpp::wrap(Adj_Sparsity(column_indices, row_indices, docs_counts, Terms, sparsity_thresh));
    return rcpp_result_gen;
END_RCPP
}
// Associations_Cpp
Rcpp::List Associations_Cpp(arma::rowvec column_indices_, arma::rowvec row_indices_, arma::vec docs_counts_, long long target_size, std::vector<std::string> Terms, std::vector<int> mult_target_var, long long keepTerms, long long target_var, std::string normalize_TF, bool tf_IDF, bool verbose);
RcppExport SEXP _textTinyR_Associations_Cpp(SEXP column_indices_SEXP, SEXP row_indices_SEXP, SEXP docs_counts_SEXP, SEXP target_sizeSEXP, SEXP TermsSEXP, SEXP mult_target_varSEXP, SEXP keepTermsSEXP, SEXP target_varSEXP, SEXP normalize_TFSEXP, SEXP tf_IDFSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::rowvec >::type column_indices_(column_indices_SEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type row_indices_(row_indices_SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type docs_counts_(docs_counts_SEXP);
    Rcpp::traits::input_parameter< long long >::type target_size(target_sizeSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type Terms(TermsSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type mult_target_var(mult_target_varSEXP);
    Rcpp::traits::input_parameter< long long >::type keepTerms(keepTermsSEXP);
    Rcpp::traits::input_parameter< long long >::type target_var(target_varSEXP);
    Rcpp::traits::input_parameter< std::string >::type normalize_TF(normalize_TFSEXP);
    Rcpp::traits::input_parameter< bool >::type tf_IDF(tf_IDFSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(Associations_Cpp(column_indices_, row_indices_, docs_counts_, target_size, Terms, mult_target_var, keepTerms, target_var, normalize_TF, tf_IDF, verbose));
    return rcpp_result_gen;
END_RCPP
}
// Most_Freq_Terms
Rcpp::List Most_Freq_Terms(arma::sp_mat sparse_data, std::vector<std::string> Terms, long long keepTerms, bool flag_dtm, int threads, bool verbose);
RcppExport SEXP _textTinyR_Most_Freq_Terms(SEXP sparse_dataSEXP, SEXP TermsSEXP, SEXP keepTermsSEXP, SEXP flag_dtmSEXP, SEXP threadsSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::sp_mat >::type sparse_data(sparse_dataSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type Terms(TermsSEXP);
    Rcpp::traits::input_parameter< long long >::type keepTerms(keepTermsSEXP);
    Rcpp::traits::input_parameter< bool >::type flag_dtm(flag_dtmSEXP);
    Rcpp::traits::input_parameter< int >::type threads(threadsSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(Most_Freq_Terms(sparse_data, Terms, keepTerms, flag_dtm, threads, verbose));
    return rcpp_result_gen;
END_RCPP
}
// sparsity_float
void sparsity_float(arma::sp_mat data);
RcppExport SEXP _textTinyR_sparsity_float(SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::sp_mat >::type data(dataSEXP);
    sparsity_float(data);
    return R_NilValue;
END_RCPP
}
// dense_2sparse_mat
arma::sp_mat dense_2sparse_mat(arma::mat x);
RcppExport SEXP _textTinyR_dense_2sparse_mat(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(dense_2sparse_mat(x));
    return rcpp_result_gen;
END_RCPP
}
// sp_sums
arma::rowvec sp_sums(arma::sp_mat sp_data, bool rowSums);
RcppExport SEXP _textTinyR_sp_sums(SEXP sp_dataSEXP, SEXP rowSumsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::sp_mat >::type sp_data(sp_dataSEXP);
    Rcpp::traits::input_parameter< bool >::type rowSums(rowSumsSEXP);
    rcpp_result_gen = Rcpp::wrap(sp_sums(sp_data, rowSums));
    return rcpp_result_gen;
END_RCPP
}
// tf_idf_exclude
arma::uvec tf_idf_exclude(arma::sp_mat tmp_mat, bool document_term_matrix);
RcppExport SEXP _textTinyR_tf_idf_exclude(SEXP tmp_matSEXP, SEXP document_term_matrixSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::sp_mat >::type tmp_mat(tmp_matSEXP);
    Rcpp::traits::input_parameter< bool >::type document_term_matrix(document_term_matrixSEXP);
    rcpp_result_gen = Rcpp::wrap(tf_idf_exclude(tmp_mat, document_term_matrix));
    return rcpp_result_gen;
END_RCPP
}
// sp_means
arma::rowvec sp_means(arma::sp_mat sp_data, bool rowMeans);
RcppExport SEXP _textTinyR_sp_means(SEXP sp_dataSEXP, SEXP rowMeansSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::sp_mat >::type sp_data(sp_dataSEXP);
    Rcpp::traits::input_parameter< bool >::type rowMeans(rowMeansSEXP);
    rcpp_result_gen = Rcpp::wrap(sp_means(sp_data, rowMeans));
    return rcpp_result_gen;
END_RCPP
}
// save_sparse_
void save_sparse_(arma::sp_mat x, std::string file_name);
RcppExport SEXP _textTinyR_save_sparse_(SEXP xSEXP, SEXP file_nameSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::sp_mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::string >::type file_name(file_nameSEXP);
    save_sparse_(x, file_name);
    return R_NilValue;
END_RCPP
}
// load_sparse_
arma::sp_mat load_sparse_(std::string file_name);
RcppExport SEXP _textTinyR_load_sparse_(SEXP file_nameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type file_name(file_nameSEXP);
    rcpp_result_gen = Rcpp::wrap(load_sparse_(file_name));
    return rcpp_result_gen;
END_RCPP
}
// read_CHARS
std::string read_CHARS(std::string input_file, long long characters, std::string write_2file);
RcppExport SEXP _textTinyR_read_CHARS(SEXP input_fileSEXP, SEXP charactersSEXP, SEXP write_2fileSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type input_file(input_fileSEXP);
    Rcpp::traits::input_parameter< long long >::type characters(charactersSEXP);
    Rcpp::traits::input_parameter< std::string >::type write_2file(write_2fileSEXP);
    rcpp_result_gen = Rcpp::wrap(read_CHARS(input_file, characters, write_2file));
    return rcpp_result_gen;
END_RCPP
}
// read_ROWS
std::vector<std::string> read_ROWS(std::string input_file, std::string write_2file, char read_delimiter, long long rows);
RcppExport SEXP _textTinyR_read_ROWS(SEXP input_fileSEXP, SEXP write_2fileSEXP, SEXP read_delimiterSEXP, SEXP rowsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type input_file(input_fileSEXP);
    Rcpp::traits::input_parameter< std::string >::type write_2file(write_2fileSEXP);
    Rcpp::traits::input_parameter< char >::type read_delimiter(read_delimiterSEXP);
    Rcpp::traits::input_parameter< long long >::type rows(rowsSEXP);
    rcpp_result_gen = Rcpp::wrap(read_ROWS(input_file, write_2file, read_delimiter, rows));
    return rcpp_result_gen;
END_RCPP
}
// Not_Duplicated
Rcpp::LogicalVector Not_Duplicated(Rcpp::CharacterVector x);
RcppExport SEXP _textTinyR_Not_Duplicated(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(Not_Duplicated(x));
    return rcpp_result_gen;
END_RCPP
}
// sublist
std::vector<std::string> sublist(Rcpp::List input, unsigned int ids);
RcppExport SEXP _textTinyR_sublist(SEXP inputSEXP, SEXP idsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type input(inputSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type ids(idsSEXP);
    rcpp_result_gen = Rcpp::wrap(sublist(input, ids));
    return rcpp_result_gen;
END_RCPP
}
// vec_parser
Rcpp::List vec_parser(std::vector<std::string> input_path_file, std::vector<std::string> start_query, std::vector<std::string> end_query, bool trimmed_line, bool verbose);
RcppExport SEXP _textTinyR_vec_parser(SEXP input_path_fileSEXP, SEXP start_querySEXP, SEXP end_querySEXP, SEXP trimmed_lineSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::string> >::type input_path_file(input_path_fileSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type start_query(start_querySEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type end_query(end_querySEXP);
    Rcpp::traits::input_parameter< bool >::type trimmed_line(trimmed_lineSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(vec_parser(input_path_file, start_query, end_query, trimmed_line, verbose));
    return rcpp_result_gen;
END_RCPP
}
// DIST
arma::rowvec DIST(arma::mat& MATRIX_1st, arma::mat& MATRIX_2nd, std::string& method, int threads, double eps);
RcppExport SEXP _textTinyR_DIST(SEXP MATRIX_1stSEXP, SEXP MATRIX_2ndSEXP, SEXP methodSEXP, SEXP threadsSEXP, SEXP epsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type MATRIX_1st(MATRIX_1stSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type MATRIX_2nd(MATRIX_2ndSEXP);
    Rcpp::traits::input_parameter< std::string& >::type method(methodSEXP);
    Rcpp::traits::input_parameter< int >::type threads(threadsSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    rcpp_result_gen = Rcpp::wrap(DIST(MATRIX_1st, MATRIX_2nd, method, threads, eps));
    return rcpp_result_gen;
END_RCPP
}
// cosine_dist
double cosine_dist(std::string& x, std::string& y, std::string& separator);
RcppExport SEXP _textTinyR_cosine_dist(SEXP xSEXP, SEXP ySEXP, SEXP separatorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string& >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::string& >::type y(ySEXP);
    Rcpp::traits::input_parameter< std::string& >::type separator(separatorSEXP);
    rcpp_result_gen = Rcpp::wrap(cosine_dist(x, y, separator));
    return rcpp_result_gen;
END_RCPP
}
// COS
arma::rowvec COS(std::vector<std::string>& TEXT_SEQ1, std::vector<std::string>& TEXT_SEQ2, int threads, std::string& separator);
RcppExport SEXP _textTinyR_COS(SEXP TEXT_SEQ1SEXP, SEXP TEXT_SEQ2SEXP, SEXP threadsSEXP, SEXP separatorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::string>& >::type TEXT_SEQ1(TEXT_SEQ1SEXP);
    Rcpp::traits::input_parameter< std::vector<std::string>& >::type TEXT_SEQ2(TEXT_SEQ2SEXP);
    Rcpp::traits::input_parameter< int >::type threads(threadsSEXP);
    Rcpp::traits::input_parameter< std::string& >::type separator(separatorSEXP);
    rcpp_result_gen = Rcpp::wrap(COS(TEXT_SEQ1, TEXT_SEQ2, threads, separator));
    return rcpp_result_gen;
END_RCPP
}
// UNIQUE
std::vector<std::string> UNIQUE(std::vector<std::string> x);
RcppExport SEXP _textTinyR_UNIQUE(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::string> >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(UNIQUE(x));
    return rcpp_result_gen;
END_RCPP
}
// INTERSECT
std::vector<std::string> INTERSECT(std::vector<std::string>& v1, std::vector<std::string>& v2);
RcppExport SEXP _textTinyR_INTERSECT(SEXP v1SEXP, SEXP v2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::string>& >::type v1(v1SEXP);
    Rcpp::traits::input_parameter< std::vector<std::string>& >::type v2(v2SEXP);
    rcpp_result_gen = Rcpp::wrap(INTERSECT(v1, v2));
    return rcpp_result_gen;
END_RCPP
}
// UNION
std::vector<std::string> UNION(std::vector<std::string>& v1, std::vector<std::string>& v2);
RcppExport SEXP _textTinyR_UNION(SEXP v1SEXP, SEXP v2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::string>& >::type v1(v1SEXP);
    Rcpp::traits::input_parameter< std::vector<std::string>& >::type v2(v2SEXP);
    rcpp_result_gen = Rcpp::wrap(UNION(v1, v2));
    return rcpp_result_gen;
END_RCPP
}
// JACCARD
double JACCARD(std::vector<std::string>& vec1, std::vector<std::string>& vec2);
RcppExport SEXP _textTinyR_JACCARD(SEXP vec1SEXP, SEXP vec2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::string>& >::type vec1(vec1SEXP);
    Rcpp::traits::input_parameter< std::vector<std::string>& >::type vec2(vec2SEXP);
    rcpp_result_gen = Rcpp::wrap(JACCARD(vec1, vec2));
    return rcpp_result_gen;
END_RCPP
}
// DICE
double DICE(std::vector<std::string>& vec1, std::vector<std::string>& vec2);
RcppExport SEXP _textTinyR_DICE(SEXP vec1SEXP, SEXP vec2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::string>& >::type vec1(vec1SEXP);
    Rcpp::traits::input_parameter< std::vector<std::string>& >::type vec2(vec2SEXP);
    rcpp_result_gen = Rcpp::wrap(DICE(vec1, vec2));
    return rcpp_result_gen;
END_RCPP
}
// inner_jd
double inner_jd(std::vector<std::vector<std::string>>& VEC1, std::vector<std::vector<std::string>>& VEC2, std::string& method, unsigned int j);
RcppExport SEXP _textTinyR_inner_jd(SEXP VEC1SEXP, SEXP VEC2SEXP, SEXP methodSEXP, SEXP jSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::vector<std::string>>& >::type VEC1(VEC1SEXP);
    Rcpp::traits::input_parameter< std::vector<std::vector<std::string>>& >::type VEC2(VEC2SEXP);
    Rcpp::traits::input_parameter< std::string& >::type method(methodSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type j(jSEXP);
    rcpp_result_gen = Rcpp::wrap(inner_jd(VEC1, VEC2, method, j));
    return rcpp_result_gen;
END_RCPP
}
// jaccard_dice
arma::rowvec jaccard_dice(std::vector<std::vector<std::string>>& VEC1, std::vector<std::vector<std::string>>& VEC2, std::string& method, int threads);
RcppExport SEXP _textTinyR_jaccard_dice(SEXP VEC1SEXP, SEXP VEC2SEXP, SEXP methodSEXP, SEXP threadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::vector<std::string>>& >::type VEC1(VEC1SEXP);
    Rcpp::traits::input_parameter< std::vector<std::vector<std::string>>& >::type VEC2(VEC2SEXP);
    Rcpp::traits::input_parameter< std::string& >::type method(methodSEXP);
    Rcpp::traits::input_parameter< int >::type threads(threadsSEXP);
    rcpp_result_gen = Rcpp::wrap(jaccard_dice(VEC1, VEC2, method, threads));
    return rcpp_result_gen;
END_RCPP
}
// inner_cm
double inner_cm(arma::mat& x, arma::rowvec& y, unsigned int i);
RcppExport SEXP _textTinyR_inner_cm(SEXP xSEXP, SEXP ySEXP, SEXP iSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::rowvec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< unsigned int >::type i(iSEXP);
    rcpp_result_gen = Rcpp::wrap(inner_cm(x, y, i));
    return rcpp_result_gen;
END_RCPP
}
// COR_MATR
arma::rowvec COR_MATR(arma::mat& x, arma::rowvec& y, int threads);
RcppExport SEXP _textTinyR_COR_MATR(SEXP xSEXP, SEXP ySEXP, SEXP threadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::rowvec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type threads(threadsSEXP);
    rcpp_result_gen = Rcpp::wrap(COR_MATR(x, y, threads));
    return rcpp_result_gen;
END_RCPP
}
// keep_idxs
arma::rowvec keep_idxs(arma::uvec& x, unsigned int exclude_idx);
RcppExport SEXP _textTinyR_keep_idxs(SEXP xSEXP, SEXP exclude_idxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::uvec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type exclude_idx(exclude_idxSEXP);
    rcpp_result_gen = Rcpp::wrap(keep_idxs(x, exclude_idx));
    return rcpp_result_gen;
END_RCPP
}
// inner_reduce_dims
double inner_reduce_dims(arma::mat& x, const arma::rowvec& ALL_OTHER_IDXs, unsigned int i, arma::rowvec& current_col);
RcppExport SEXP _textTinyR_inner_reduce_dims(SEXP xSEXP, SEXP ALL_OTHER_IDXsSEXP, SEXP iSEXP, SEXP current_colSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type ALL_OTHER_IDXs(ALL_OTHER_IDXsSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type i(iSEXP);
    Rcpp::traits::input_parameter< arma::rowvec& >::type current_col(current_colSEXP);
    rcpp_result_gen = Rcpp::wrap(inner_reduce_dims(x, ALL_OTHER_IDXs, i, current_col));
    return rcpp_result_gen;
END_RCPP
}
// reduce_dims_with_correlation
arma::uvec reduce_dims_with_correlation(arma::mat& x, arma::rowvec& y, double response_lower_thresh, double predictors_upper_thresh, int threads);
RcppExport SEXP _textTinyR_reduce_dims_with_correlation(SEXP xSEXP, SEXP ySEXP, SEXP response_lower_threshSEXP, SEXP predictors_upper_threshSEXP, SEXP threadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::rowvec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type response_lower_thresh(response_lower_threshSEXP);
    Rcpp::traits::input_parameter< double >::type predictors_upper_thresh(predictors_upper_threshSEXP);
    Rcpp::traits::input_parameter< int >::type threads(threadsSEXP);
    rcpp_result_gen = Rcpp::wrap(reduce_dims_with_correlation(x, y, response_lower_thresh, predictors_upper_thresh, threads));
    return rcpp_result_gen;
END_RCPP
}
// modulus
long long modulus(long long a, int b);
RcppExport SEXP _textTinyR_modulus(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< long long >::type a(aSEXP);
    Rcpp::traits::input_parameter< int >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(modulus(a, b));
    return rcpp_result_gen;
END_RCPP
}
// batch_calculation
std::map<int, std::vector<long long>> batch_calculation(long long nr_rows, int batches);
RcppExport SEXP _textTinyR_batch_calculation(SEXP nr_rowsSEXP, SEXP batchesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< long long >::type nr_rows(nr_rowsSEXP);
    Rcpp::traits::input_parameter< int >::type batches(batchesSEXP);
    rcpp_result_gen = Rcpp::wrap(batch_calculation(nr_rows, batches));
    return rcpp_result_gen;
END_RCPP
}
// DISTINCT_WORD_INTERSECT
std::vector<std::string> DISTINCT_WORD_INTERSECT(std::vector<std::string> VEC1, std::vector<std::string> VEC2);
RcppExport SEXP _textTinyR_DISTINCT_WORD_INTERSECT(SEXP VEC1SEXP, SEXP VEC2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::string> >::type VEC1(VEC1SEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type VEC2(VEC2SEXP);
    rcpp_result_gen = Rcpp::wrap(DISTINCT_WORD_INTERSECT(VEC1, VEC2));
    return rcpp_result_gen;
END_RCPP
}
// NUM_LETTERS_DISTINCT
arma::rowvec NUM_LETTERS_DISTINCT(std::vector<std::string> VEC);
RcppExport SEXP _textTinyR_NUM_LETTERS_DISTINCT(SEXP VECSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::string> >::type VEC(VECSEXP);
    rcpp_result_gen = Rcpp::wrap(NUM_LETTERS_DISTINCT(VEC));
    return rcpp_result_gen;
END_RCPP
}
// COUNTS_INTERSECT
arma::rowvec COUNTS_INTERSECT(std::vector<std::vector<std::string>> SUBL1, std::vector<std::vector<std::string>> SUBL2, bool distinct, bool num_letters);
RcppExport SEXP _textTinyR_COUNTS_INTERSECT(SEXP SUBL1SEXP, SEXP SUBL2SEXP, SEXP distinctSEXP, SEXP num_lettersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::vector<std::string>> >::type SUBL1(SUBL1SEXP);
    Rcpp::traits::input_parameter< std::vector<std::vector<std::string>> >::type SUBL2(SUBL2SEXP);
    Rcpp::traits::input_parameter< bool >::type distinct(distinctSEXP);
    Rcpp::traits::input_parameter< bool >::type num_letters(num_lettersSEXP);
    rcpp_result_gen = Rcpp::wrap(COUNTS_INTERSECT(SUBL1, SUBL2, distinct, num_letters));
    return rcpp_result_gen;
END_RCPP
}
// RATIO_DISTINCT
arma::rowvec RATIO_DISTINCT(std::vector<std::vector<std::string>> SUBL1, std::vector<std::vector<std::string>> SUBL2, bool distinct, bool num_letters);
RcppExport SEXP _textTinyR_RATIO_DISTINCT(SEXP SUBL1SEXP, SEXP SUBL2SEXP, SEXP distinctSEXP, SEXP num_lettersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::vector<std::string>> >::type SUBL1(SUBL1SEXP);
    Rcpp::traits::input_parameter< std::vector<std::vector<std::string>> >::type SUBL2(SUBL2SEXP);
    Rcpp::traits::input_parameter< bool >::type distinct(distinctSEXP);
    Rcpp::traits::input_parameter< bool >::type num_letters(num_lettersSEXP);
    rcpp_result_gen = Rcpp::wrap(RATIO_DISTINCT(SUBL1, SUBL2, distinct, num_letters));
    return rcpp_result_gen;
END_RCPP
}
// read_ROWS_wv
std::string read_ROWS_wv(std::string input_file, char read_delimiter);
RcppExport SEXP _textTinyR_read_ROWS_wv(SEXP input_fileSEXP, SEXP read_delimiterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type input_file(input_fileSEXP);
    Rcpp::traits::input_parameter< char >::type read_delimiter(read_delimiterSEXP);
    rcpp_result_gen = Rcpp::wrap(read_ROWS_wv(input_file, read_delimiter));
    return rcpp_result_gen;
END_RCPP
}
// count_rows
long long count_rows(std::string FILE, bool verbose);
RcppExport SEXP _textTinyR_count_rows(SEXP FILESEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type FILE(FILESEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(count_rows(FILE, verbose));
    return rcpp_result_gen;
END_RCPP
}
// reduced_word_vectors
Rcpp::List reduced_word_vectors(std::string FILE, std::vector<std::string> unique_tokens, int vector_dimensions, int print_every_rows, bool verbose, bool copy_data);
RcppExport SEXP _textTinyR_reduced_word_vectors(SEXP FILESEXP, SEXP unique_tokensSEXP, SEXP vector_dimensionsSEXP, SEXP print_every_rowsSEXP, SEXP verboseSEXP, SEXP copy_dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type FILE(FILESEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type unique_tokens(unique_tokensSEXP);
    Rcpp::traits::input_parameter< int >::type vector_dimensions(vector_dimensionsSEXP);
    Rcpp::traits::input_parameter< int >::type print_every_rows(print_every_rowsSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< bool >::type copy_data(copy_dataSEXP);
    rcpp_result_gen = Rcpp::wrap(reduced_word_vectors(FILE, unique_tokens, vector_dimensions, print_every_rows, verbose, copy_data));
    return rcpp_result_gen;
END_RCPP
}
// word_vectors_methods
arma::mat word_vectors_methods(Rcpp::List rcpp_list, std::vector<std::vector<std::string> >& INPUT_list, std::string FILE, std::string method, std::vector<std::string> unique_tokens, int vector_dimensions, std::vector<std::string>& gtw_terms, std::vector<double>& gtw_weights, int print_every_rows, bool verbose, int threads, bool copy_data);
RcppExport SEXP _textTinyR_word_vectors_methods(SEXP rcpp_listSEXP, SEXP INPUT_listSEXP, SEXP FILESEXP, SEXP methodSEXP, SEXP unique_tokensSEXP, SEXP vector_dimensionsSEXP, SEXP gtw_termsSEXP, SEXP gtw_weightsSEXP, SEXP print_every_rowsSEXP, SEXP verboseSEXP, SEXP threadsSEXP, SEXP copy_dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type rcpp_list(rcpp_listSEXP);
    Rcpp::traits::input_parameter< std::vector<std::vector<std::string> >& >::type INPUT_list(INPUT_listSEXP);
    Rcpp::traits::input_parameter< std::string >::type FILE(FILESEXP);
    Rcpp::traits::input_parameter< std::string >::type method(methodSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type unique_tokens(unique_tokensSEXP);
    Rcpp::traits::input_parameter< int >::type vector_dimensions(vector_dimensionsSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string>& >::type gtw_terms(gtw_termsSEXP);
    Rcpp::traits::input_parameter< std::vector<double>& >::type gtw_weights(gtw_weightsSEXP);
    Rcpp::traits::input_parameter< int >::type print_every_rows(print_every_rowsSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< int >::type threads(threadsSEXP);
    Rcpp::traits::input_parameter< bool >::type copy_data(copy_dataSEXP);
    rcpp_result_gen = Rcpp::wrap(word_vectors_methods(rcpp_list, INPUT_list, FILE, method, unique_tokens, vector_dimensions, gtw_terms, gtw_weights, print_every_rows, verbose, threads, copy_data));
    return rcpp_result_gen;
END_RCPP
}
// append_data
std::unordered_map<int, Rcpp::List > append_data(Rcpp::List x, std::vector<int> y);
RcppExport SEXP _textTinyR_append_data(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(append_data(x, y));
    return rcpp_result_gen;
END_RCPP
}
